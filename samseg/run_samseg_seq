#!/usr/bin/env python
import sys
sys.path.append("/scratch/users/lhaupt/ext/freesurfer_build/freesurfer/python/packages")
import os
import argparse
import surfa as sf
import freesurfer.samseg as samseg
import pdb
import numpy as np


# ------ Parse Command Line Arguments ------

parser = argparse.ArgumentParser()

default_threads = int(os.environ.get('OMP_NUM_THREADS', 1))

# required
parser.add_argument('-t', '--timepoint', nargs='+', action='append', required=True, help='Configure a timepoint with multiple inputs.')
parser.add_argument('-o', '--output', required=True, help='Output directory.')
parser.add_argument('-y', '--years', nargs='+', action='append', help='Assingn years to each given timepoint')
# optional lesion options
parser.add_argument('--lesion', action='store_true', default=False, help='Enable lesion segmentation (requires tensorflow).')
parser.add_argument('--threshold', type=float, default=0.3, help='Lesion threshold for final segmentation. Lesion segmentation must be enabled.')
parser.add_argument('--samples', type=int, default=50, help='Number of samples for lesion segmentation. Lesion segmentation must be enabled.')
parser.add_argument('--burnin', type=int, default=50, help='Number of burn-in samples for lesion segmentation. Lesion segmentation must be enabled.')
parser.add_argument('--lesion-mask-structure', default='Cortex', help='Intensity mask brain structure. Lesion segmentation must be enabled.')
parser.add_argument('--lesion-mask-pattern', type=int, nargs='+', help='Lesion mask list (set value for each input volume): -1 below lesion mask structure mean, +1 above, 0 no mask. Lesion segmentation must be enabled.')
# optional processing options
parser.add_argument('-m', '--mode', nargs='+', help='Output basenames for the input image mode.')
parser.add_argument('-a', '--atlas', metavar='DIR', help='Point to an alternative atlas directory.')
parser.add_argument('--deformation-hyperprior', type=float, default=20.0, help='Strength of the latent deformation hyperprior.')
parser.add_argument('--gmm-hyperprior', type=float, default=0.5, help='Strength of the latent GMM hyperprior.')
parser.add_argument('--save-warp', action='store_true', help='Save the image->template warp fields.')
parser.add_argument('--save-mesh', action='store_true', help='Save the final mesh of each timepoint in template space.')
parser.add_argument('--save-posteriors', nargs='*', help='Save posterior volumes to the "posteriors" subdirectory.')
parser.add_argument('--pallidum-separate', action='store_true', default=False, help='Move pallidum outside of global white matter class. Use this flag when T2/flair is used.')
parser.add_argument('--threads', type=int, default=default_threads, help='Number of threads to use. Defaults to current OMP_NUM_THREADS or 1.')
# optional debugging options
parser.add_argument('--history', action='store_true', default=False, help='Save history.')
parser.add_argument('--showfigs', action='store_true', default=False, help='Show figures during run.')
parser.add_argument('--movie', action='store_true', default=False, help='Show history as arrow key controlled time sequence.')

args = parser.parse_args()

# ------ Initial Setup ------

# Make sure more than 1 timepoint was specified
if len(args.timepoint) == 1:
    sf.system.fatal('must provide more than 1 timepoint')

# Make sure freesurfer has been sourced
if not os.environ.get('FREESURFER_HOME'):
    sf.system.fatal('FREESURFER_HOME must be set')

# Create the output folder
os.makedirs(args.output, exist_ok=True)

# Specify the maximum number of threads the GEMS code will use
samseg.setGlobalDefaultNumberOfThreads(args.threads)

# Get the atlas directory
atlasDir = os.environ.get('SAMSEG_DATA_DIR')
if args.atlas:
    atlasDir = args.atlas
if not atlasDir:
    # Atlas defaults
    if args.lesion:
        defaultAtlas = '20Subjects_smoothing2_down2_smoothingForAffine2_lesion'
    else:
        defaultAtlas = '20Subjects_smoothing2_down2_smoothingForAffine2'
    atlasDir = os.path.join(os.environ.get('FREESURFER_HOME'), 'average', 'samseg', defaultAtlas)

# Setup the visualization tool
visualizer = samseg.initVisualizer(args.showfigs, args.movie)

# Start the process timer
timer = samseg.Timer()

# Check if --save-posteriors was specified without any structure search string
if args.save_posteriors is not None and len(args.save_posteriors) == 0:
    savePosteriors = True
else:
    savePosteriors = args.save_posteriors

# ------ Run Samsegment ------

years = [float(el) for el in args.years[0]]
last_year = 0
hiddenState = None

def exp_kernel_function(a,b, l=1):
    return np.exp(-np.power(a-b,2)/l)

for i, timepoint in enumerate(args.timepoint):

    current_timepoint = timepoint
    weight = exp_kernel_function(last_year, years[i])
    save_path = os.path.join(args.output, str(i))
    os.makedirs(save_path, exist_ok=True)

    samseg_kwargs = dict(
    imageFileNamesList=[timepoint],
    imageWeights=[weight],
    hiddenState = hiddenState,
    atlasDir=atlasDir,
    savePath=save_path,
    targetIntensity=110,
    targetSearchStrings=['Cerebral-White-Matter'],
    modeNames=args.mode,
    pallidumAsWM=(not args.pallidum_separate),
    strengthOfLatentDeformationHyperprior=args.deformation_hyperprior,
    strengthOfLatentGMMHyperprior=args.gmm_hyperprior,
    savePosteriors=savePosteriors,
    saveMesh=args.save_mesh,
    saveHistory=args.history,
    visualizer=visualizer
    )

    samsegLongitudinal = samseg.SamsegLongitudinal2(**samseg_kwargs)

    samsegLongitudinal.segment(saveWarp=args.save_warp)
    hiddenState = samsegLongitudinal.latentAtlasFileName
    last_year = years[i]

timer.mark('run_samseg_long complete')
